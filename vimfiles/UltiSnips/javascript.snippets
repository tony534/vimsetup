snippet addel "addEventLisener" 
${1:element}.addEventLisener('${2:event}', function(ev){
	${3}
})${0}
endsnippet

snippet for "for loop" b
for(var i=0; i < ${1:arr}.length; i++){
	${2} 
}${0}
endsnippet

snippet setInterval "Description" b
var myVar=setInterval(function(){
	    ${1}
    }, 1000);
endsnippet


snippet setTimeout "Description" b
setTimeout(function(){
    ${1}
}, 3000);
endsnippet

snippet confirm "Description" b
var r = confirm("${1:msg}");
if (r == true) {
    ${2}
} else {
    ${3}
}
endsnippet

snippet rodml "Description" b
${1:ct}.${2:create}(ctDetails, function(err, results, event) {
    if(err) { 
        console.log(err);
        alert(err.message);
    }
    else {
        // this is the contact
        console.log(ct.log());     // Dump contact to log
        console.log(ct.get('Id')); // Id is set when create completes
    }
});
endsnippet

snippet comid "Description" 
'{!$Component.${1:id1.id2}}'
endsnippet

snippet isenter "Description" b
if ((e.which && e.which == 13) || (e.keyCode && e.keyCode == 13)) {
    document.getElementById('${1:button}').click();
    return false;
}
endsnippet


snippet ra "for non-package" b
${1:Controller.Method}(${2:param}, function(result, event)){
    if (event.status) {
	    ${3:parse(result)}
    } else if (event.type === 'exception') {
	    document.getElementById("responseErrors").innerHTML = event.message;
    } else {
	    document.getElementById("responseErrors").innerHTML = event.message;
    }
},{escape:true});
endsnippet

snippet ra "for package and non-package" b
Visualforce.remoting.Manager.invokeAction(
    '{!$RemoteAction.${1:MyController.getAccount}}', 
    ${2:accountName}, 
    function(result, event){
	    if (event.status) {
		    ${3:parse(result)}
	    } else if (event.type === 'exception') {
		    document.getElementById("responseErrors").innerHTML = event.message;
	    } else {
		    document.getElementById("responseErrors").innerHTML = event.message;
	    }
    }, 
    {escape: true}
);
endsnippet

snippet Oa "Object.assign" b
let settings = Object.assign({}, ${1:default}, ${2:options}); ${0}
endsnippet

snippet fo "for...of.." b
for(let ${1:a} of ${2:arr}){
    ${3}
}${0}
endsnippet

snippet => "Arrow Function" b
(${1})=>{${2}}
endsnippet

snippet Si "Symbol.iterator" b
${1:ObjectName}[Symbol.iterator] = function(){
    let properties = Object.keys(this);
    let count = 0;
    let isDone = false;
    let next = () => {
	if(count >= properties.length){
	    isDone = true;
	}
	return { done: isDone, value: this[properties[count++]] };
    }
    return { next };
}

endsnippet

snippet Siy "generator" b
${1:ObjectName}[Symbol.iterator] = function *(){
    let properties = Object.keys(this);
    for(let p of properties){
	    yield this[p];
    }
}
${0}

endsnippet

snippet iifee "iife without windows param" b
(function() {
    ${1}
}());
${0}

endsnippet

snippet gulp-exec "Description" b
var exec = require('child_process').exec;
gulp.task('${1:task}', function (callback) {
  exec('${2:ping localhost}', function (err, stdout, stderr) {
    console.log(stdout);
    console.log(stderr);
    callback(err);
  });
});
${0}
endsnippet

snippet jtask "Description" b
desc("${1}");
task("${2:default}", function() {
    ${3}
});
${0}
endsnippet

snippet jexec "jake-exec" b
desc("${1}")
task("${2}", function() {
    jake.exec("${3}",{interactive:true}, complete);
}, {async:true});
${0}
endsnippet

snippet actrl "call apex controller" b
var action = comp.get('c.${1}');
action.setParams({
    ${2}
});
action.setCallback(this, function(data) {
    ${3}
});
$A.enqueueAction(action);
endsnippet

snippet vget "Value Provider Get" b
cmp.get("v.${1}");$2
endsnippet

snippet vset "Value Provider Set" b
cmp.set("v.${1}", ${2});$3
endsnippet

snippet ctrl "lightning controller" b
${1:name} : function(cmp, evt, helper){
    $2
}
endsnippet

snippet cFire "component event fire" b
${1:fireComponentEvent} : function(cmp, event) {
    var ${2:attr} = cmp.get("v.${3:parentName}");
    // Look up event by name, not by type
    var compEvents = cmp.getEvent("${4:eventName}");
    compEvents.setParams({ "${5:paramName}" :  ${6:paramValue});
    compEvents.fire();
}

endsnippet

snippet aFire "component event fire" b
${1:fireAppEvent} : function(cmp, event) {
    var ${2:attr} = cmp.get("v.${3:attrName}");
    // note different syntax for getting application event
    var appEvent = $A.get("e.c:${4:appEvent}");
    appEvent.setParams({ "${5:paramName}" : ${6:paramValue});
    appEvent.fire();
}
endsnippet

snippet createComponent "create component" b
$A.createComponent(
	"${1:lightning:button}",
	
	{
		${2:aura:id}": "${3:findableAuraId}",
		
	},
	
	function(newCmp, status, errorMessage){
		if (status === "SUCCESS") {
			var body = cmp.get("v.body");
			body.push(newCmp);
			cmp.set("v.body", body);
		}else if (status === "INCOMPLETE"){
			// Show offline error
			console.log("No response from server or client is offline.");
		}else if (status === "ERROR") {
			// Show error message
			console.log("Error: " + errorMessage);
		}
	}
);
endsnippet

snippet createNestedComponents "create nested component component" b
$A.createComponents(
	[   // first component
		[ "ui:message",  
			{
				"title" : "Sample Thrown Error",
				"severity" : "error",
			}
		], 
		// 2nd component
		[ "ui:outputText", 
			{
				"value" : e.message
			} 
		] 
		
	], function(components, status, errorMessage) {
		if (status === "SUCCESS") {
			var message = components[0];
			var outputText = components[1];
			// set the body of the ui:message to be the ui:outputText
			message.set("v.body", outputText);
		} else if (status === "INCOMPLETE") {
			console.log("No response from server or client is offline.")
			// Show offline error
		} else if (status === "ERROR") {
			console.log("Error: " + errorMessage);
			// Show error message
		}
	})
endsnippet




