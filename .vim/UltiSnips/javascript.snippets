snippet addel "addEventLisener" 
${1:element}.addEventLisener('${2:event}', function(ev){
	${3}
})${0}
endsnippet

snippet for "for loop" b
for(var i=0; i < ${1:arr}.length; i++){
	${2} 
}${0}
endsnippet

snippet setInterval "Description" b
var myVar=setInterval(function(){
	    ${1}
    }, 1000);
endsnippet


snippet setTimeout "Description" b
setTimeout(function(){
    ${1}
}, 3000);
endsnippet

snippet confirm "Description" b
var r = confirm("${1:msg}");
if (r == true) {
    ${2}
} else {
    ${3}
}
endsnippet

snippet rodml "Description" b
${1:ct}.${2:create}(ctDetails, function(err, results, event) {
    if(err) { 
        console.log(err);
        alert(err.message);
    }
    else {
        // this is the contact
        console.log(ct.log());     // Dump contact to log
        console.log(ct.get('Id')); // Id is set when create completes
    }
});
endsnippet

snippet comid "Description" 
'{!$Component.${1:id1.id2}}'
endsnippet

snippet isenter "Description" b
if ((e.which && e.which == 13) || (e.keyCode && e.keyCode == 13)) {
    document.getElementById('${1:button}').click();
    return false;
}
endsnippet


snippet ra "for non-package" b
${1:Controller.Method}(${2:param}, function(result, event)){
    if (event.status) {
	    ${3:parse(result)}
    } else if (event.type === 'exception') {
	    document.getElementById("responseErrors").innerHTML = event.message;
    } else {
	    document.getElementById("responseErrors").innerHTML = event.message;
    }
},{escape:true});
endsnippet

snippet ra "for package and non-package" b
Visualforce.remoting.Manager.invokeAction(
    '{!$RemoteAction.${1:MyController.getAccount}}', 
    ${2:accountName}, 
    function(result, event){
	    if (event.status) {
		    ${3:parse(result)}
	    } else if (event.type === 'exception') {
		    document.getElementById("responseErrors").innerHTML = event.message;
	    } else {
		    document.getElementById("responseErrors").innerHTML = event.message;
	    }
    }, 
    {escape: true}
);
endsnippet


snippet Oa "Object.assign" b
let settings = Object.assign({}, ${1:default}, ${2:options}); ${0}
endsnippet

snippet fo "for...of.." b
for(let ${1:a} of ${2:arr}){
    ${3}
}${0}
endsnippet

snippet => "Arrow Function" b
(${1})=>{${2}}
endsnippet

snippet Si "Symbol.iterator" b
${1:ObjectName}[Symbol.iterator] = function(){
    let properties = Object.keys(this);
    let count = 0;
    let isDone = false;
    let next = () => {
	if(count >= properties.length){
	    isDone = true;
	}
	return { done: isDone, value: this[properties[count++]] };
    }
    return { next };
}

endsnippet

snippet Siy "generator" b
${1:ObjectName}[Symbol.iterator] = function *(){
    let properties = Object.keys(this);
    for(let p of properties){
	    yield this[p];
    }
}
${0}

endsnippet
